#!/usr/bin/env python3
import unittest
from unittest.mock import patch
from utils import (
    access_nested_map,
    get_json,
    memoize,
)


class TestMemoize(unittest.TestCase):
    def test_mock_inner_method(self):
        # Define the inner class

        class TestClass:
            def a_method(self):
                return 42

            def a_property(self):
                return self.a_method()

        # Create an instance of the inner class
        testObj = TestClass()

        # Use @patch to mock the inner method
        with patch.object(testObj, 'a_property', return_value="Mocked method result"):
            # Call the method under test that uses the inner class
            result = self.a_property_tester(testObj)

        # Assert the result with the mocked value
        self.assertEqual(result, "Mocked method result")

    def a_property_tester(self, obj):
        # Do something with the inner object
        return obj.a_property()

if __name__ == '__main__':
    unittest.main()
